---
apiVersion: batch/v1
kind: Job
metadata:
  name: post-install-instana-operator
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
spec:
  template:
    spec:
      containers:
        - name: post-install
          image: quay.io/openshift/origin-cli:latest
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          command:
            - /bin/sh
            - -c
            - |
              #set -o pipefail
              set -x
              result=0
              
              echo "============ in post-install =========="
              echo "wait until instana-operator pod running"
              while true; do
                if oc get pod -n instana-operator | grep -e "^instana-operator-" | grep Running | grep "1/1"; then
                  echo "instana-operator pod is running, break wait." 
                  break
                else
                  echo "waiting until instana-operator pod running ..."
                  sleep 10
                fi
              done

              # base ingress , 
              base=`oc get ingresses.config/cluster -o jsonpath={.spec.domain}`
              echo ${base}

              # ------------ cr core , unit ------------
              # ns
              cat << EOF | oc apply -f -
              apiVersion: v1
              kind: Namespace
              metadata:
                name: instana-core
                labels:
                  app.kubernetes.io/name: instana-core
              ---
              apiVersion: v1
              kind: Namespace
              metadata:
                name: instana-units
                labels:
                  app.kubernetes.io/name: instana-units
              EOF
              
              # ocp scc
              oc adm policy add-scc-to-user anyuid -z instana-core -n instana-core
              oc adm policy add-scc-to-user anyuid -z default -n instana-core
              
              oc adm policy add-scc-to-user privileged -z default      -n instana-core
              oc adm policy add-scc-to-user privileged -z instana-core -n instana-core
              oc adm policy add-scc-to-group anyuid     system:serviceaccounts:instana-core
              oc adm policy add-scc-to-group privileged system:serviceaccounts:instana-core
              
              
              oc adm policy add-scc-to-user anyuid -z instana-prod -n instana-units
              oc adm policy add-scc-to-user anyuid -z default -n instana-units
              
              oc adm policy add-scc-to-group anyuid     system:serviceaccounts:instana-units
              oc adm policy add-scc-to-group privileged system:serviceaccounts:instana-units
              oc adm policy add-scc-to-user privileged -z default      -n instana-units
              oc adm policy add-scc-to-user privileged -z instana-prod -n instana-units
              
              
              
              # instana license and cert stuff
              # kubectl instana license download --sales-key $INSTANA_SALES_KEY
              # cat license.json | tr -d '[]"' > license
              # kubectl create configmap instana-license -n default --from-file=lic=license
              oc get cm/instana-license -n default  -o jsonpath={.data.lic}  > license

              #optional ??
              # create key.pem, cert.pem
              # mycertpem.sh $portalPassword  $base
              # cat key.pem cert.pem > sp.pem
              # kubectl create configmap instana-sppem -n default --from-file=sppem=sp.pem
              if  oc get cm/instana-sppem -n default; then
                oc get cm/instana-sppem -n default  -o jsonpath={.data.sppem}  > sp.pem
                # instana-service-provider : not need in 217 per k3s stan.sh??
                kubectl create secret generic instana-service-provider  --namespace instana-core --from-literal=sp.key.pass={{ .Values.portalPassword }} --from-file=sp.pem=sp.pem
                kubectl label secret instana-service-provider   app.kubernetes.io/name=instana -n instana-core
              fi
              
              openssl dhparam -out dhparams.pem 2048
              openssl req -x509 -newkey rsa:2048 -keyout tls.key -out tls.crt -days 365 -nodes -subj "/CN=instana.$base"
              # ls -ltr  
              # license.json
              # license
              # key.pem
              # cert.pem
              # sp.pem
              # dhparams.pem
              # tls.key
              # tls.crt
              
              
              # secrets from stuff
              # docker-registry instana-registry 
              kubectl create secret docker-registry instana-registry --namespace instana-core \
                  --docker-username=_ \
                  --docker-password={{ .Values.INSTANA_DOWNLOAD_KEY }} \
                  --docker-server=containers.instana.io
              kubectl label secret instana-registry app.kubernetes.io/name=instana --namespace instana-core
              
              # instana-base
              kubectl create secret generic instana-base --namespace instana-core \
                  --from-literal=downloadKey={{ .Values.INSTANA_DOWNLOAD_KEY }} \
                  --from-literal=salesKey={{ .Values.INSTANA_SALES_KEY }} \
                  --from-literal=adminPassword={{ .Values.portalPassword }}  \
                  --from-file=license=license \
                  --from-file=dhparams.pem=dhparams.pem \
                  --from-literal=token.secret=uQOkH+Y4wU_0
              kubectl label secret instana-base app.kubernetes.io/name=instana --namespace instana-core
              
              
              # instana-tls
              kubectl create secret tls instana-tls --namespace instana-core --cert=tls.crt --key=tls.key
              kubectl label secret instana-tls   app.kubernetes.io/name=instana -n instana-core
              
              
              # cr
              echo "creating core ..." 
              cat << EOF | oc apply -f -
              apiVersion: instana.io/v1beta1
              kind: Core
              metadata:
                namespace: instana-core
                name: instana-core
              spec:
                baseDomain: instana.${base}
                agentAcceptorConfig:
                  host: agent.instana.${base}
                  port: 443
                resourceProfile: small
                # Datastore configs with default ports for each db
                datastoreConfigs:
                  - type: cassandra
                    addresses:
                      - {{ .Values.dbhost }}
                  - type: cockroachdb
                    addresses:
                      - {{ .Values.dbhost }}
                  - type: clickhouse
                    addresses:
                      - {{ .Values.dbhost }}
                  - type: elasticsearch
                    addresses:
                      - {{ .Values.dbhost }}
                  - type: kafka
                    addresses:
                      - {{ .Values.dbhost }}
                rawSpansStorageConfig:
                  pvcConfig:
                    accessModes:
                      - ReadWriteMany
                    resources:
                      requests:
                        storage: 2Gi
                    storageClassName: {{ .Values.storageClassName }}
              EOF
              
              echo "creating unit ..." 
              cat << EOF | oc apply -f -
              apiVersion: instana.io/v1beta1
              kind: Unit
              metadata:
                namespace: instana-units
                name: instana-prod
              spec:
                coreName: instana-core
                coreNamespace: instana-core
                tenantName: instana
                unitName: prod
                initialAgentKey: {{ .Values.INSTANA_DOWNLOAD_KEY }}
                resourceProfile: small
              EOF
               
              
              # routes 
              cat << EOF | oc apply -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: acceptor
                namespace: instana-core
              spec:
                host: agent.instana.${base}
                port:
                  targetPort: 8600
                tls:
                  insecureEdgeTerminationPolicy: Redirect
                  termination: passthrough
                to:
                  kind: Service
                  name: acceptor
              EOF
              
              cat << EOF | oc apply -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: gateway-core
                namespace: instana-core
              spec:
                host: instana.${base}
                port:
                  targetPort: 8443
                tls:
                  insecureEdgeTerminationPolicy: Redirect
                  termination: passthrough
                to:
                  kind: Service
                  name: gateway
              EOF
              
              cat << EOF | oc apply -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: gateway-unit
                namespace: instana-core
              spec:
                host: prod-instana.instana.${base}
                port:
                  targetPort: 8443
                tls:
                  insecureEdgeTerminationPolicy: Redirect
                  termination: passthrough
                to:
                  kind: Service
                  name: gateway
              EOF
             

              exit 0

          volumeMounts:
          - mountPath: /root/.kube
            name: kubeconfig              
      volumes:
      - name: kubeconfig
        secret:
          defaultMode: 420
          items:
          - key: credentials
            path: config
          secretName: kubeconfig
      restartPolicy: Never
      serviceAccountName: instana-operator-hook

