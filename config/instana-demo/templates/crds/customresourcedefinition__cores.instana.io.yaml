apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: instana-operator/instana-operator-webhook
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: cores.instana.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: instana-operator-webhook
          namespace: instana-operator
          path: /convert
      conversionReviewVersions:
        - v1
  group: instana.io
  names:
    kind: Core
    listKind: CoreList
    plural: cores
    singular: core
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.status
          name: Status
          type: string
        - jsonPath: .status.version
          name: Version
          type: string
      name: v1beta2
      schema:
        openAPIV3Schema:
          description: Core is the Schema for the cores API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: CoreSpec specifies the configuration of an Instana core.
              properties:
                agentAcceptorConfig:
                  description: Host and port for the agent acceptor.
                  properties:
                    host:
                      description: The host name or IP address.
                      type: string
                    port:
                      description: The port.
                      format: int32
                      type: integer
                  required:
                    - host
                    - port
                  type: object
                baseDomain:
                  description: Base domain for Instana.
                  type: string
                componentConfigs:
                  description: ComponentConfigs override component default configurations.
                  items:
                    description: ComponentConfig allows additional configuration for a specific component.
                    properties:
                      affinity:
                        description: Affinity is a group of affinity scheduling rules.
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements by node's labels.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements by node's fields.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    weight:
                                      description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - preference
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements by node's labels.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements by node's fields.
                                          items:
                                            description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: The label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    type: array
                                required:
                                  - nodeSelectorTerms
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term, associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                          type: string
                                      required:
                                        - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - podAffinityTerm
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources, in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                    - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term, associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaceSelector:
                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                              items:
                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label key that the selector applies to.
                                                    type: string
                                                  operator:
                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                  - key
                                                  - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                          type: string
                                      required:
                                        - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                    - podAffinityTerm
                                    - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources, in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                              - key
                                              - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                    - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      env:
                        description: List of additional environment variables to set in the container.
                        items:
                          description: EnvVar represents an environment variable present in a Container.
                          properties:
                            name:
                              description: Name of the environment variable. Must be a C_IDENTIFIER.
                              type: string
                            value:
                              description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                              type: string
                            valueFrom:
                              description: Source for the environment variable's value. Cannot be used if value is not empty.
                              properties:
                                configMapKeyRef:
                                  description: Selects a key of a ConfigMap.
                                  properties:
                                    key:
                                      description: The key to select.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the ConfigMap or its key must be defined
                                      type: boolean
                                  required:
                                    - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                                fieldRef:
                                  description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                  properties:
                                    apiVersion:
                                      description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      type: string
                                    fieldPath:
                                      description: Path of the field to select in the specified API version.
                                      type: string
                                  required:
                                    - fieldPath
                                  type: object
                                  x-kubernetes-map-type: atomic
                                resourceFieldRef:
                                  description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                  properties:
                                    containerName:
                                      description: 'Container name: required for volumes, optional for env vars'
                                      type: string
                                    divisor:
                                      anyOf:
                                        - type: integer
                                        - type: string
                                      description: Specifies the output format of the exposed resources, defaults to "1"
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    resource:
                                      description: 'Required: resource to select'
                                      type: string
                                  required:
                                    - resource
                                  type: object
                                  x-kubernetes-map-type: atomic
                                secretKeyRef:
                                  description: Selects a key of a secret in the pod's namespace
                                  properties:
                                    key:
                                      description: The key of the secret to select from.  Must be a valid secret key.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the Secret or its key must be defined
                                      type: boolean
                                  required:
                                    - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                          required:
                            - name
                          type: object
                        type: array
                      imageTag:
                        description: Overrides the Docker image tag for the component.
                        pattern: ^[1-9]\d*\.\d+\.\d+-\d+$
                        type: string
                      name:
                        type: string
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: Selector which must match a node's labels for the pod to be scheduled on that node.
                        type: object
                      priorityClassName:
                        description: Configures a priority class for the component.
                        type: string
                      properties:
                        description: Configures component configuration properties.
                        items:
                          description: Property for component configuration.
                          properties:
                            name:
                              description: The name of the property.
                              type: string
                            value:
                              description: The value of the property.
                              type: string
                          required:
                            - name
                            - value
                          type: object
                        type: array
                      replicas:
                        description: Number of desired replicas. Defaults to 1 if not set.
                        format: int32
                        type: integer
                      resources:
                        description: Compute resources required by this component. If omitted, the operator applies reasonable defaults, depending on the configured profile.
                        properties:
                          limits:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                                - type: integer
                                - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      tolerations:
                        description: The pod that this toleration is attached to tolerates any taint that matches the triple `key,value,effect` by using the matching operator `operator`.
                        items:
                          description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                    required:
                      - name
                    type: object
                  type: array
                datastoreConfigs:
                  description: DatastoreConfigs configure datastore connection information.
                  properties:
                    beeInstanaConfig:
                      properties:
                        authEnabled:
                          description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                          type: boolean
                        clustered:
                          type: boolean
                        hosts:
                          description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                          items:
                            type: string
                          minItems: 1
                          type: array
                        ports:
                          description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                          items:
                            description: NamedPort holds a port with a name.
                            properties:
                              name:
                                description: The name of the port
                                type: string
                              port:
                                description: The port.
                                format: int32
                                type: integer
                            required:
                              - name
                              - port
                            type: object
                          type: array
                        properties:
                          description: Optional properties that may be used for the DB setup.
                          items:
                            description: Property for component configuration.
                            properties:
                              name:
                                description: The name of the property.
                                type: string
                              value:
                                description: The value of the property.
                                type: string
                            required:
                              - name
                              - value
                            type: object
                          type: array
                      required:
                        - hosts
                      type: object
                    cassandraConfigs:
                      items:
                        properties:
                          authEnabled:
                            description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                            type: boolean
                          hosts:
                            description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          keyspaces:
                            items:
                              type: string
                            type: array
                          ports:
                            description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                            items:
                              description: NamedPort holds a port with a name.
                              properties:
                                name:
                                  description: The name of the port
                                  type: string
                                port:
                                  description: The port.
                                  format: int32
                                  type: integer
                              required:
                                - name
                                - port
                              type: object
                            type: array
                          properties:
                            description: Optional properties that may be used for the DB setup.
                            items:
                              description: Property for component configuration.
                              properties:
                                name:
                                  description: The name of the property.
                                  type: string
                                value:
                                  description: The value of the property.
                                  type: string
                              required:
                                - name
                                - value
                              type: object
                            type: array
                        required:
                          - hosts
                        type: object
                      type: array
                    clickhouseConfigs:
                      items:
                        properties:
                          authEnabled:
                            description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                            type: boolean
                          clusterName:
                            default: local
                            type: string
                          hosts:
                            description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          ports:
                            description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                            items:
                              description: NamedPort holds a port with a name.
                              properties:
                                name:
                                  description: The name of the port
                                  type: string
                                port:
                                  description: The port.
                                  format: int32
                                  type: integer
                              required:
                                - name
                                - port
                              type: object
                            type: array
                          properties:
                            description: Optional properties that may be used for the DB setup.
                            items:
                              description: Property for component configuration.
                              properties:
                                name:
                                  description: The name of the property.
                                  type: string
                                value:
                                  description: The value of the property.
                                  type: string
                              required:
                                - name
                                - value
                              type: object
                            type: array
                          schemas:
                            items:
                              type: string
                            type: array
                        required:
                          - hosts
                        type: object
                      type: array
                    cockroachdbConfigs:
                      items:
                        properties:
                          authEnabled:
                            description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                            type: boolean
                          databases:
                            items:
                              type: string
                            type: array
                          hosts:
                            description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          ports:
                            description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                            items:
                              description: NamedPort holds a port with a name.
                              properties:
                                name:
                                  description: The name of the port
                                  type: string
                                port:
                                  description: The port.
                                  format: int32
                                  type: integer
                              required:
                                - name
                                - port
                              type: object
                            type: array
                          properties:
                            description: Optional properties that may be used for the DB setup.
                            items:
                              description: Property for component configuration.
                              properties:
                                name:
                                  description: The name of the property.
                                  type: string
                                value:
                                  description: The value of the property.
                                  type: string
                              required:
                                - name
                                - value
                              type: object
                            type: array
                        required:
                          - hosts
                        type: object
                      type: array
                    elasticsearchConfig:
                      properties:
                        authEnabled:
                          description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                          type: boolean
                        clusterName:
                          default: onprem_onprem
                          type: string
                        defaultIndexReplicas:
                          default: 0
                          format: int32
                          type: integer
                        defaultIndexRoutingPartitionSize:
                          default: 1
                          format: int32
                          type: integer
                        defaultIndexShards:
                          default: 1
                          format: int32
                          type: integer
                        hosts:
                          description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                          items:
                            type: string
                          minItems: 1
                          type: array
                        indexConfigs:
                          items:
                            properties:
                              name:
                                type: string
                              replicas:
                                format: int32
                                type: integer
                              routingPartitionSize:
                                format: int32
                                type: integer
                              shards:
                                format: int32
                                type: integer
                            required:
                              - name
                              - replicas
                              - routingPartitionSize
                              - shards
                            type: object
                          type: array
                        ports:
                          description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                          items:
                            description: NamedPort holds a port with a name.
                            properties:
                              name:
                                description: The name of the port
                                type: string
                              port:
                                description: The port.
                                format: int32
                                type: integer
                            required:
                              - name
                              - port
                            type: object
                          type: array
                        properties:
                          description: Optional properties that may be used for the DB setup.
                          items:
                            description: Property for component configuration.
                            properties:
                              name:
                                description: The name of the property.
                                type: string
                              value:
                                description: The value of the property.
                                type: string
                            required:
                              - name
                              - value
                            type: object
                          type: array
                      required:
                        - hosts
                      type: object
                    kafkaConfig:
                      properties:
                        authEnabled:
                          description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                          type: boolean
                        hosts:
                          description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                          items:
                            type: string
                          minItems: 1
                          type: array
                        ports:
                          description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                          items:
                            description: NamedPort holds a port with a name.
                            properties:
                              name:
                                description: The name of the port
                                type: string
                              port:
                                description: The port.
                                format: int32
                                type: integer
                            required:
                              - name
                              - port
                            type: object
                          type: array
                        properties:
                          description: Optional properties that may be used for the DB setup.
                          items:
                            description: Property for component configuration.
                            properties:
                              name:
                                description: The name of the property.
                                type: string
                              value:
                                description: The value of the property.
                                type: string
                            required:
                              - name
                              - value
                            type: object
                          type: array
                        replicationFactor:
                          default: 1
                          format: int32
                          minimum: 1
                          type: integer
                      required:
                        - hosts
                      type: object
                    postgresConfigs:
                      description: Currently for testing purposes only and not supported. Do not use.
                      items:
                        properties:
                          authEnabled:
                            description: Enables authentication for the datastore. Credentials are expected to be configured in a secret in the core namespace that has the same name as the corresponding core.
                            type: boolean
                          databases:
                            items:
                              type: string
                            type: array
                          hosts:
                            description: A list of hosts for connecting to the datastore. For ClickHouse clusters, entries must be in correct order for sharding.
                            items:
                              type: string
                            minItems: 1
                            type: array
                          ports:
                            description: A list of named ports for connection to the datastore. If omitted, default ports are used.
                            items:
                              description: NamedPort holds a port with a name.
                              properties:
                                name:
                                  description: The name of the port
                                  type: string
                                port:
                                  description: The port.
                                  format: int32
                                  type: integer
                              required:
                                - name
                                - port
                              type: object
                            type: array
                          properties:
                            description: Optional properties that may be used for the DB setup.
                            items:
                              description: Property for component configuration.
                              properties:
                                name:
                                  description: The name of the property.
                                  type: string
                                value:
                                  description: The value of the property.
                                  type: string
                              required:
                                - name
                                - value
                              type: object
                            type: array
                        required:
                          - hosts
                        type: object
                      type: array
                  required:
                    - kafkaConfig
                  type: object
                emailConfig:
                  description: Configuration for sending e-mails via Amazon SES or an SMTP server.
                  properties:
                    sesConfig:
                      description: Configures Amazon Simple Email Service for sending e-mails.
                      properties:
                        from:
                          description: From e-mail address.
                          type: string
                        region:
                          description: AWS region.
                          type: string
                        returnPath:
                          description: Return path.
                          type: string
                      required:
                        - from
                        - region
                        - returnPath
                      type: object
                    smtpConfig:
                      description: Configures an SMTP server for sending e-mails.
                      properties:
                        check_server_identity:
                          default: false
                          description: CheckServerIdentity enables server identity verification if set to true.
                          type: boolean
                        from:
                          description: From e-mail address.
                          type: string
                        host:
                          description: Host name of the SMTP server.
                          type: string
                        port:
                          description: Port of the SMTP server.
                          format: int32
                          type: integer
                        startTLS:
                          default: false
                          description: StartTLS enables StartTLS if set to true.
                          type: boolean
                        useSSL:
                          default: false
                          description: UseSSL enables SSL if set to true.
                          type: boolean
                      required:
                        - from
                        - host
                        - port
                      type: object
                  type: object
                enableNetworkPolicies:
                  default: false
                  description: If true, network policies are installed.
                  type: boolean
                featureFlags:
                  description: Configures global feature flags.
                  items:
                    description: FeatureFlag flag configuration.
                    properties:
                      enabled:
                        description: Toggles the feature flag.
                        type: boolean
                      name:
                        description: The name of the feature flag.
                        type: string
                    required:
                      - enabled
                      - name
                    type: object
                  type: array
                geoDbUrl:
                  description: URL for downloading the GeoLite2 geolocation data file.
                  type: string
                heapDumpsPVC:
                  description: Configures a PVC for storing JVM heap dumps. If not configured, heaps dump are written to a mounted emptyDir on OufOfMemoryError. The volume must support ReadWriteMany access.
                  properties:
                    accessModes:
                      description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                      items:
                        type: string
                      type: array
                    dataSource:
                      description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                      x-kubernetes-map-type: atomic
                    dataSourceRef:
                      description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                      x-kubernetes-map-type: atomic
                    resources:
                      description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                      properties:
                        limits:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                    selector:
                      description: selector is a label query over volumes to consider for binding.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                              - key
                              - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    storageClassName:
                      description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                      type: string
                    volumeMode:
                      description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                      type: string
                    volumeName:
                      description: volumeName is the binding reference to the PersistentVolume backing this claim.
                      type: string
                  type: object
                imageConfig:
                  description: Overrides the Docker image for the component. Only the fields that should be overridden (e.g. Tag) have to be set.
                  properties:
                    registry:
                      description: The Docker registry to use. Defaults to 'containers.instana.io'.
                      type: string
                    repository:
                      description: Path to the image within the registry. Defaults to 'instana/release/product'. The operator automatically appends component names when it computes the full image tag.
                      type: string
                    tag:
                      description: The image version to use. Each operator release comes with a default version that is used when the field is left empty.
                      type: string
                  type: object
                imagePullPolicy:
                  description: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
                  type: string
                imagePullSecrets:
                  description: ImagePullSecrets is an optional list of references to secrets to use for pulling images. The specified secrets must be present in core and unit namespaces.
                  items:
                    description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  type: array
                nodeSelector:
                  additionalProperties:
                    type: string
                  description: Selector which must match a node's labels for pods to be scheduled on that node.
                  type: object
                operationMode:
                  default: normal
                  description: Operator operation mode. One of 'normal' or 'maintenance' (defaults to 'normal'). Deployments are scaled to zero if set to 'maintenance'.
                  enum:
                    - normal
                    - maintenance
                  type: string
                operationScopes:
                  default:
                    - core
                    - global
                  description: Defines components of which scope to deploy. Only relevant for SaaS-like deployment scenarios.
                  items:
                    enum:
                      - core
                      - global
                    type: string
                  type: array
                priorityClassName:
                  description: Configures a global priority class for all pods created by the operator.
                  type: string
                properties:
                  description: Configures global component configuration properties.
                  items:
                    description: Property for component configuration.
                    properties:
                      name:
                        description: The name of the property.
                        type: string
                      value:
                        description: The value of the property.
                        type: string
                    required:
                      - name
                      - value
                    type: object
                  type: array
                proxyConfig:
                  description: ProxyConfig configuration.
                  properties:
                    host:
                      description: The host name or IP address.
                      type: string
                    port:
                      description: The port.
                      format: int32
                      type: integer
                  required:
                    - host
                    - port
                  type: object
                rawSpansStorageConfig:
                  description: Configuration for raw spans storage. Configures where raw spans should be stored. Either a PersistentVolumeClaim or an object storage (S3 or compatible) bucket must be configured.
                  properties:
                    gcloudConfig:
                      description: Configures Google Cloud Storage for raw spans storage.
                      properties:
                        bucket:
                          description: Bucket name.
                          type: string
                        bucketLongTerm:
                          description: Bucket name for long-term storage.
                          type: string
                        prefix:
                          description: Prefix for the storage bucket.
                          type: string
                        prefixLongTerm:
                          description: Prefix for the long-term storage bucket.
                          type: string
                        storageClass:
                          description: Storage class.
                          type: string
                        storageClassLongTerm:
                          description: Storage class for objects written to the long-term bucket.
                          type: string
                      required:
                        - bucket
                        - bucketLongTerm
                        - prefix
                        - prefixLongTerm
                        - storageClass
                        - storageClassLongTerm
                      type: object
                    pvcConfig:
                      description: Configures a PersistentVolumeClaim for raw spans storage. The volume must support ReadWriteMany access.
                      properties:
                        accessModes:
                          description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                          items:
                            type: string
                          type: array
                        dataSource:
                          description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.'
                          properties:
                            apiGroup:
                              description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                              type: string
                            kind:
                              description: Kind is the type of resource being referenced
                              type: string
                            name:
                              description: Name is the name of resource being referenced
                              type: string
                          required:
                            - kind
                            - name
                          type: object
                          x-kubernetes-map-type: atomic
                        dataSourceRef:
                          description: 'dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.'
                          properties:
                            apiGroup:
                              description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                              type: string
                            kind:
                              description: Kind is the type of resource being referenced
                              type: string
                            name:
                              description: Name is the name of resource being referenced
                              type: string
                          required:
                            - kind
                            - name
                          type: object
                          x-kubernetes-map-type: atomic
                        resources:
                          description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        selector:
                          description: selector is a label query over volumes to consider for binding.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                          x-kubernetes-map-type: atomic
                        storageClassName:
                          description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                          type: string
                        volumeMode:
                          description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                          type: string
                        volumeName:
                          description: volumeName is the binding reference to the PersistentVolume backing this claim.
                          type: string
                      type: object
                    s3Config:
                      description: Configures S3 (or compatible) for raw spans storage.
                      properties:
                        bucket:
                          description: Bucket name.
                          type: string
                        bucketLongTerm:
                          description: Bucket name for long-term storage.
                          type: string
                        endpoint:
                          description: Endpoint address of the object storage.
                          type: string
                        prefix:
                          description: Prefix for the storage bucket.
                          type: string
                        prefixLongTerm:
                          description: Prefix for the long-term storage bucket.
                          type: string
                        region:
                          description: Region.
                          type: string
                        storageClass:
                          description: Storage class.
                          type: string
                        storageClassLongTerm:
                          description: Storage class for objects written to the long-term bucket.
                          type: string
                      required:
                        - bucket
                        - bucketLongTerm
                        - endpoint
                        - prefix
                        - prefixLongTerm
                        - region
                        - storageClass
                        - storageClassLongTerm
                      type: object
                  type: object
                resourceProfile:
                  default: medium
                  description: The resource profile to use.
                  type: string
                serviceAccountAnnotations:
                  additionalProperties:
                    type: string
                  description: Annotations for the ServiceAccount that is created for the pods. Can e.g. be used to assign IAM roles on EKS.
                  type: object
                serviceProviderConfig:
                  description: Service provider configuration for SAML or OIDC.
                  properties:
                    basePath:
                      default: /auth
                      description: Base URL (defaults to "/auth").
                      pattern: ^\/.*
                      type: string
                    maxAuthenticationLifetimeSeconds:
                      default: 604800
                      description: The maximum authentication lifetime (defaults to 604800).
                      format: int64
                      type: integer
                    maxIDPMetadataSizeInBytes:
                      default: 200000
                      description: The maximum IDP metadata size (defaults to 200000).
                      format: int64
                      type: integer
                  type: object
                tolerations:
                  description: The pod that this toleration is attached to tolerates any taint that matches the triple `key,value,effect` by using the matching operator `operator`.
                  items:
                    description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                    properties:
                      effect:
                        description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                        type: string
                      key:
                        description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                        type: string
                      operator:
                        description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                        type: string
                      tolerationSeconds:
                        description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                        format: int64
                        type: integer
                      value:
                        description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                        type: string
                    type: object
                  type: array
              required:
                - baseDomain
                - datastoreConfigs
                - emailConfig
                - resourceProfile
              type: object
            status:
              properties:
                lastUpdate:
                  description: The last status update time.
                  format: date-time
                  type: string
                status:
                  description: Current operator status.
                  type: string
                version:
                  description: Currently running Instana version.
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
